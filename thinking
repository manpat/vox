-> = has reference to
: = Derived from

Block OnInteract should recieve info about interacter
	Should enable synchronisation over network

ComputerBlock -> Computer
Computer -> ComputerBlock // to change tint/textures or some shit
Computer -> ComputerGUI
Computer -> vm state and port states

// Server
ComputerBlock::OnPlace()
	Create and Register Computer
	Notify players in range of new computer
ComputerBlock::OnBreak()
	Deregister and destroy computer
	Notify players in range of computer destruction
ComputerBlock::OnInteract()
	Attach player to computer


Need GUI helpers to make shit not terrible
	buttons n' stuff
	info about gui things
	centralised way to get focus

ComputerGUI 

Computer : ThingWithPorts

ThingWithPortsManager {
	ThingWithPorts[] things;
}

ThingWithPorts {
	type // id into ThingsWithPortsRegistry

	PortIn[] inputs
	PortOut[] outputs
}

// How ports work kinda depends on what style language the computers will have

// Input ports can accept input from one source
// Output ports can output to many input ports

Port {
	enum Type {
		boolean, // Controlling lights n' shit; button input
		number, // Maybe split into int/float? Maybe not? Controlling thrusters
		string,

		composite/bus, // Bundles of data; port forwarders, connecting monitors/computers
		// Just pointer to thing? {Address/Port, Value} packets?
	}

	string name
}

PortIn : Port {
	Connection to PortOut

	Value GetValue() // pull value from connection or use default (sticky?)
}

PortOut : Port {
	Connection to PortIn []

	void SetValue(Value)
}


Possible things that can have ports
===================================

Computers
Memory/Storage/Disk Drives - I don't know why yet
Monitors
Pilot chair
Holo stuff

Lights
Buttons
Doors/Airlocks

Scanners
	Radar kinda
Motion sensors

Reactors
Power storage

Thrusters
"Beam me up scotty"
"Punch it chewie"
Shield generator
Weapon stuff





Moving things
=============

Chunks can be at weird angles and can move so we need
a way to render and apply phyics to things near them

Biggest priority being ships

"Gravity Generator"

On collide with Chunk set players gravity thing/parent
Rendering should be fine

Physics tho
	Making players move with ships could be awkward

	One possibility:
		simulate players in influence of ship as if it weren't moving and upright
		then simulate the ship as normal

		Separate physics world?
		Or copy rigidbodies to upright version and make real versions kinematic
			Update position/rotation as appropriate

	Another:
		Some way to parent rigidbodies?
		Constraints?



Networking
==========

Transport layer
---------------
	Lowest level
	Handles low level connections and sending/receiving packets
	Common between server and client

Replication layer
-----------------
	Synchronises entities between server and clients
	Gathers data from local player and manages updating of NetworkedPlayers

	Chunk keeps track of modified blocks in buffer which is sent to transport 
		layer at end of frame

		Transport layer can then optimise packets for large changes

Client doesn't create chunks
	Client instead sends out of bounds voxel space position
	Server does checks and creates new chunk

Where does physics simulation happen?
	On both server and client
	client phys is approximant for non local objects
	local player is responsible for own physics

	Physics on non player objects owned by server
		and approximated/updated by/on clients

What happens when a player interacts with a block?
	block::OnClientInteract -> *network* -> block::OnServerInteract
	ClientInteract shows gui which displays current state of block
		gui sends further messages to server
	ServerInteract does any actual logic

Should dynamic blocks have both a Client side and Server side representation?
	Server doesn't need to know about text meshes
	Client doesn't necessarily need to know the state/logic of all locks

Client
------
	All mesh related stuff
	All rendering related stuff
	All gui stuff?
	LocalPlayer
		Responsible for own simulation
	NetworkedPlayer
	Local physics

	ChunkRenderer
		one renders many
		
	ChunkRenderInfo
		one per chunk
		contains buffer objects

Shared
------
	Neighborhood stuff
	Chunk stuff
		Both server and client need representations of chunks and neighborhoods
	Block definitions
		Client needs to know how to render, server needs to know what to update
	Physics simulation

	PlayerBase
	ChunkManager
		Should have no rendering logic

	Lowlevel networking

Server
------
	ServerPlayer
	Client approximation ?
	Physics of non player objects

	Block update




Possible blocks and requirements
================================

Computer
--------
	Client side
		GUI, text input

		Needs state updates from server side while interacting

		OnServerMessage - Set screen state

	Server side
		Virtual machine, ports

		Needs to know if a player is attached
		Needs to accept text input from client side
		Needs to interact with virtual machine and send state to client
		Needs to know when a player interacts with it
		Needs to handle interactions on ports

		Update - Do VM and port stuff
		OnInteract - Attach player
		OnClientMessage - Send data to vm


TP pad
------
	Server side
		Ports
		Needs to be able to set players positions


Use cases for a player
======================
Connect to a server
Quit game
Join/change team
Set name

States
	Walking
	InCapturingGUI - Don't move with wasd; Don't capture mouse; Send input to GUI
	Piloting - Don't move with wasd; Send input to vehicle

Place blocks, break blocks
Interact with dynamic blocks

Change tools/modes

Modes/tools
	Normal mode
		Cannot break blocks w/o weapons or explosives, if they exist

	Wire mode
		Has overlay that shows current connections and availale ports
		Allows linking ports of dynamic blocks
		Allow placing of buttons, lights?

	Pipe mode?
		If there are going to be resources that need piping, then this would
		be for that
		Similar to wire mode

	Build mode 
		Allows placing and removing of blocks
		Has gui element that shows selected block type/orientation
		Has hotbar/psuedo-inventory รก la creative mode space engineers

Create/Build ship
Pilot ship
Walk around in moving ship

Go to different sector

Download visible chunks on join server and when changing sector


-----------

Wired networks should be confined to a neighborhood